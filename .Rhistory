stat.desc(infile$PRODUCT_ID_CNT)
stats.desc(infile$PRODUCT_ID_CNT)
stat.desc(infile$PRODUCT_ID_CNT)
options(digits = 2)
stat.desc(infile$PRODUCT_ID_CNT)
options(scipen = 100)
stat.desc(infile$PRODUCT_ID_CNT)
pnorm(6, mean=2.456, sd = 3.103)
qnorm(0.87, mean=2.456, sd = 3.103)
qnorm(0.90, mean=2.456, sd = 3.103)
hist(infile$PRODUCT_ID_CNT)
qnorm(0.95, mean=2.456, sd = 3.103)
infile = read.csv("C:\\rk\\Bigdata\\Statistics and Data analysis\\Statistics An easier way with R\\data\\tvs-201607.csv", header=T)
infile = read.csv("C:\\rk\\Bigdata\\Statistics and Data analysis\\Statistics An easier way with R\\data\\tvs-201607.csv", header=T, skip = 2)
head(infile)
aggregate(RANGE~CELL_TYPE, data = infile, FUN = mean)
aggregate(RANGE~CELL_TYPE, data = infile, FUN = summary)
barplot(table(infile$CELL_TYPE), main="Cell Type Plot", col=c("blue", "red"))
barplot(table(infile$CELL_TYPE), main="Cell Type Plot", col=c("blue", "violet"))
barplot(table(infile$CELL_TYPE), main="Cell Type Plot", col=c("black", "violet"))
barplot(table(infile$CELL_TYPE), main="Cell Type Plot", col=c("black"))
barplot(table(infile$CELL_TYPE), main="Cell Type Plot", col=c("red"))
barplot(table(infile$CELL_TYPE), main="Cell Type Plot", col=c("cyan"))
barplot(table(infile$CELL_TYPE), main="Cell Type Plot", col=c("grey"))
x = barplot(table(infile$CELL_TYPE))
text(x, 3, labels=infile$CELL_TYPE)
text(x, 30, labels=infile$CELL_TYPE)
text(x, 1, labels=infile$CELL_TYPE)
text(x, 100, labels=infile$CELL_TYPE)
text(x, 1000, labels=infile$CELL_TYPE)
barplot(table(infile$CELL_TYPE), main="Cell Type Plot", col=c("grey"), horiz = T)
barplot(table(infile$CELL_TYPE), main="Cell Type Plot", col=c("grey"), horiz = T, density = 9)
barplot(table(infile$CELL_TYPE), main="Cell Type Plot", col=c("grey"), horiz = T, density = 22)
barplot(table(infile$CELL_TYPE), main="Cell Type Plot", col=c("grey"), horiz = T, density = 202)
table(infile$CELL_TYPE)
table(infile$CELL_TYPE)/sum(infile$CELL_TYPE)
table(infile$CELL_TYPE)/nrow(infile)
barplot(table(infile$CELL_TYPE)/nrow(infile))
x = hist(infile$RANGE)
lines(x$density, lw)
lines(x$density, lwd = 3, lty="dotted")
x = hist(infile$RANGE, freq=F)
lines(x$density, lwd = 3, lty="dotted")
lines(density(x), lwd = 3, lty="dotted")
lines(density(x), lwd = 3, lty="dotted")
x = hist(infile$RANGE, freq=F)
lines(density(x$density), lwd = 3, lty="dotted")
lines(density(density(infile$RANGE)), lwd = 3, lty="dotted")
lines(density(infile$RANGE), lwd = 3, lty="dotted")
density(infile$RANGE)
x = hist(infile$RANGE, freq=F)
curve(density(infile$RANGE), lwd = 3, lty="dotted")
infile = read.csv(file.choose(), header = TRUE)
head(infile)
barplot(table(infile$test.case))
aggregate(wet.foam.ht~test.case, data=infile, fun= mean)
aggregate(wet.foam.ht~test.case, data=infile, FUN= mean)
infile = read.csv(file.choose())
head(infile)
table(infile$brewery)
barplot(table(infile$brewery))
barplot(table(infile$brewery), xlab="xlabel", ylab="ylab", main="title")
barplot(table(infile$brewery), xlab="xlabel", ylab="ylab", main="title", ylim=c(0,100))
barplot(table(infile$brewery), xlab="xlabel", ylab="ylab", main="title", ylim=c(0,100),color=c("black","blue"))
barplot(table(infile$brewery), xlab="xlabel", ylab="ylab", main="title", ylim=c(0,100),col=c("black","blue"))
barplot(table(infile$brewery), xlab="xlabel", ylab="ylab", main="title", ylim=c(0,100),col=c("black","blue"))
barplot(table(infile$brewery), xlab="xlabel", ylab="ylab", main="title", ylim=c(0,100),col=c("black","red"))
head(infile)
hist(infile$beer.ht)
qqnorm(infile$beer.ht)
hist(infile$beer.ht)
library(pastecs)
stat.desc(infile$beer.ht)
quantile(infile$beer.ht)
8.62 + (3*1.76)
qnorm(0.95, mean=8.62, sd=1.77)
qbeta(0.95, mean=8.62, sd=1.77)
qnorm(0.95, mean=8.62, sd=1.77)
lines(dnorm(infile$beer.ht))
lines(dnorm(infile$beer.ht))
dnorm(infile$beer.ht,mean = 8.62, sd=1.77)
lines(dnorm(infile$beer.ht,mean = 8.62, sd=1.77))
plot(dnorm(infile$beer.ht,mean = 8.62, sd=1.77))
hist(infile$beer.ht)
lines(density(infile$beer.ht))
hist(infile$beer.ht, freq = FALSE)
lines(density(infile$beer.ht))
barplot(table(infile$brewery))
barplot(table(infile$brewery), horiz = F)
barplot(table(infile$brewery), horiz = FALSE)
barplot(table(infile$brewery), horiz = TRUE)
head(infile)
infile= read.csv(file.choose())
head(infile)
cont = table(infile$color, infile$defect)
cont
prop.table(cont)
prop.table(cont,1)
prop.table(cont,2)
barplot(prop.table(cont,2))
mm.counts
barplot(prop.table(cont,2), names.arg = c("abc"))
barplot(prop.table(cont,2), names.arg = c("abc","def","edf","df"))
barplot(cont, names.arg = c("abc","def","edf","df"))
barplot(prop.table(cont,2), names.arg = c("abc","def","edf","df"))
barplot(prop.table(cont,2), names.arg = c("abc","def","edf","df"),legend=T)
barplot(prop.table(cont,2), names.arg = c("abc","def","edf","df"),legend=T, ylim=c(0,1.6))
barplot(prop.table(cont,2), names.arg = c("abc","def","edf","df"),legend=T, ylim=c(0,7))
barplot(prop.table(cont,2), names.arg = c("abc","def","edf","df"),legend=T, ylim=c(0,1))
barplot(t(prop.table(cont,2)), names.arg = c("abc","def","edf","df"),legend=T, ylim=c(0,1))
barplot(t(prop.table(cont,2)),legend=T, ylim=c(0,1))
barplot(t(prop.table(cont,1)),legend=T, ylim=c(0,1))
barplot(t(prop.table(cont,2)),legend=T, ylim=c(0,1))
prop.table(cont,1)
t(prop.table(cont,1))
prop.table(cont,2)
barplot(t(prop.table(cont,1)),legend=T, ylim=c(0,1))
barplot(t(prop.table(cont,1)),legend=T, ylim=c(0,1),col = c("red","blue","yellow"))
barplot(t(prop.table(cont,1)),legend=T, ylim=c(0,1),col = c("red","blue","yellow","green"))
library(RColorBrewer)
barplot(
y,
xlim=c(0, ncol(y) + 3),
col=brewer.pal(nrow(y), "Paired"),
ylab="My Variables",
legend.text=TRUE,
args.legend=list(
x=ncol(y) + 3,
y=max(colSums(y)),
bty = "n"
)
)
set.seed(1234)
x <- replicate(8, round(10 * rexp(2000, 10)))
y <- apply(x, 2, function(column) table(factor(column, levels = 0:9)))
barplot(
y,
xlim=c(0, ncol(y) + 3),
col=brewer.pal(nrow(y), "Paired"),
ylab="My Variables",
legend.text=TRUE,
args.legend=list(
x=ncol(y) + 3,
y=max(colSums(y)),
bty = "n"
)
)
fivenum(infile$color)
x = rnorm(100, mean=8, sd = 4)
fivenum(c)
fivenum(x)
quantile(x)
summary(x)
fivenum(x)
boxplot(x)
boxplot(x,horizontal = T)
plot(x)
hist(x)
boxplot(x,horizontal = T)
qqnorm(x)
hist(x)
hist(x, freq = F)
lines(density(x))
runif(n=29, min=18, max=54)
plot(runif(n=29, min=18, max=54))
hist(runif(n=29, min=18, max=54))
plot(runif(n=29, min=1, max=50))
hist(runif(n=29, min=1, max=50))
hist(runif(n=29, min=1, max=50))
hist(runif(n=29, min=1, max=50))
hist(runif(n=29, min=1, max=50))
hist(runif(n=29, min=1, max=50))
hist(runif(n=29, min=1, max=50))
hist(runif(n=29, min=1, max=50))
hist(runif(n=29, min=1, max=50))
hist(runif(n=29, min=1, max=50))
hist(runif(n=29, min=1, max=50))
hist(runif(n=29, min=1, max=50))
hist(runif(n=29, min=1, max=50))
hist(runif(n=29, min=1, max=50))
hist(runif(n=29, min=1, max=50))
hist(runif(n=29, min=1, max=50))
hist(runif(n=29, min=1, max=50))
hist(runif(n=29, min=1, max=50))
hist(runif(n=29, min=1, max=50))
hist(runif(n=29, min=1, max=50), freq = F)
hist(runif(n=29, min=1, max=50), freq = F)
hist(runif(n=29, min=1, max=50), freq = F)
hist(runif(n=29, min=1, max=50), freq = F)
hist(runif(n=29, min=1, max=50), freq = F)
infile = read.csv(file.choose(0))
infile = read.csv(file.choose())
infile = read.csv(file.choose())
head(infile
)
table(infile$when)
barplot(score~when, data=infile)
barplot(score~when, data=infile)
aggregate(score~when, data = infile)
aggregate(score~when, data = infile, FUN = sum)
aggregate(score~when, data = infile, FUN = mean)
aggregate(score~when, data = infile, FUN = summary)
aggregate(score~when, data = infile, FUN = fivenum)
barplot(when)
barplot(when, dat
)
barplot(when, data=infile)
barplot(infile$score~infile$when)
infile = read.table(file.choose(), sep=",")
str(infile)
infile = read.csv(file.choose())
str(infile)
infile = read.table(file.choose(), sep=",", header=T)
str(infile)
barplot(score~when, data=infile)
as.matrix(infile)
infile = as.matrix(infile)
barplot(score~when, data=infile)
barplot(as.matrix(score)~as.matrix(when), data=infile)
str(infile)
infile$score
infile = read.csv(file.choose())
ordered(infile$when)
levels(infile$when)
str(infile)
boxplot(x,horizontal = T)
x
typeof(x)
y = as.numeric(infile$score)
typeof(y)
boxplot(y)
as.character(infile$when)
z=as.character(infile$when)
boxplot(y~z)
inifle$when
infile$when
ordered(infile$year)
ordered(infile$year, levels=c("FA11", "SP12", "FA14"))
ordered(infile$year, levels=c("FA11", "SP12", "FA14"))
ordered(infile$year, levels=c("FA11", "SP12", "FA14"))
ordered(infile$year, levels=c("FA11", "FA14", "FB14"))
infile$year = ordered(infile$year, levels=c("FA11", "SP12", "FA14"))
infile$when = ordered(infile$when, levels=c("FA11", "SP12", "FA14"))
infile$when
z = as.character(infile$when)
barplot(y~z)
boxplot(y~z)
ls
sample.size = 100
numtrials = 10000
p.vals = rep(NA, numtrials)
gpa.means = rep(NA, numtrials)
compare.to <- 3.00
for (j in 1:numtrials) { }
for (j in 1:numtrials) {
library(stabledist)
for (j in 1:numtrials) {}
for (j in 1:numtrials) {
r <- rstable(n=1000, alpha=0.5, beta=0.75, gamma = 1, delta = 3.2)
meets.conds <- r[r>0 & r<4.001]
my.sample <- round(meets.conds[1:sample.size],3)
gpa.meas[j] <- round(mean(my.sample),3)
p.vals[j] <- t.test(my.sample, mu=compare.to, alternative="greater")$p.value
if (p.vals[j] < 0.02) {}
capture <- my.sample
}
for (j in 1:numtrials) {
r <- rstable(n=1000, alpha=0.5, beta=0.75, gamma = 1, delta = 3.2)
meets.conds <- r[r>0 & r<4.001]
my.sample <- round(meets.conds[1:sample.size],3)
gpa.means[j] <- round(mean(my.sample),3)
p.vals[j] <- t.test(my.sample, mu=compare.to, alternative="greater")$p.value
if (p.vals[j] < 0.02) {
capture <- my.sample
}
}
summary(p.vals)
fivenum(p.vals)
p.vals.under5 = p.vals[p.vals < 0.05]
p.vals.under5
boxplot(p.vals)
hist(capture)
hist(capture, col="purple")
mean(capture)
sd(capture)
library(qcc)
pareto.chart(capture)
capture
conf.level = 0.05
conf.level = 0.95
conf.level + ((1-conf.level)/2)
qnorm(0.975)
conf.level - ((1-conf.level)/2)
(1-conf.level) - ((1-conf.level)/2)
39/120
prop.test(39,120,conf.level = 0.95)
prop.test(55,120,conf.level = 0.95)
prop.test(5,120,conf.level = 0.95)
0.008*0.008
options(digits = 3)
0.008*0.008
options(scipen = 3)
0.008*0.008
install.packages("PropCIs")
library(PropCIs)
scoreci(39, 120, conf.level = 0.95)
scoreci(9, 120, conf.level = 0.95)
0.413-0.248
.0136-0.04
0.136-0.04
speeds <- c(29, 25, 22, 34, 38, 40, 27, 29, 30, 30, 23, 34, 42, 36, 35, 27, 37)
length(speeds)
summary(speeds)
options(scipen = 2)
summary(speeds)
options(scipen = 3)
summary(speeds)
options(scipen = 5)
summary(speeds)
options(digits = 2)
summary(speeds)
options(digits = 5)
summary(speeds)
options(digits = 20)
summary(speeds)
options(digits = 10)
summary(speeds)
options(digits = 5)
summary(speeds)
options(digits = 6)
summary(speeds)
options(digits = 7)
summary(speeds)
sd(speeds)
t.test(speeds, mu = 30, alternative = "greater")
(31.65 - 30) / (5.926014 / sqrt(16))
(31.65 - 30) / (5.926014 / sqrt(17))
pt(1.146, df = 16)
1-pt(1.146, df = 16)
qt(0.975, df=16)
31.65+qt(0.975, df=16)*(sd(x)/sqrt(n))
31.65+qt(0.975, df=16)*(sd(speeds)/sqrt(17))
31.65-qt(0.975, df=16)*(sd(speeds)/sqrt(17))
infile = read.csv("C:\\rk\\Bigdata\\Statistics and Data analysis\\Statistics An easier way with R\\data\\bear-foam.csv", header=T)
infile = read.csv("C:\\rk\\Bigdata\\Statistics and Data analysis\\Statistics An easier way with R\\data\\beer-foam.csv", header=T)
head(infile)
cold <- hist(infile[infile$test.case=="SH-COLD",]$tau, breaks = 12)
rt <- hist(infile[infile$test.case=="SH-RT",]$tau, breaks = 6)
plot(cold, col=rgb(0,0,1,1/4), xlim=c(100, 400), ylim = c(0,12), main = "Tau for Cold ad Room Temperature Cases (SH)", xlab="Tau", ylab = "Frequency")
plot(rt, col=rgb(1,0,0,1/4), xlim=c(100, 400), ylim = c(0,12),add=T)
cold2 <- hist(infile[infile$test.case=="3B-COLD",]$tau, breaks = 12)
rt2 <- hist(infile[infile$test.case=="3B-RT",]$tau, breaks = 12)
plot(cold2, xlab="Tau", ylab="Frequency", xlim=c(100,400), ylim=c(0,12), main="Tau for Cold and Room Temparature Cases (3B)")
plot(cold2, xlab="Tau", ylab="Frequency", xlim=c(100,400), ylim=c(0,12), main="Tau for Cold and Room Temparature Cases (3B)", col=rgb(0,0,1,1/4))
plot(rt2, add=T, col=rgb(1,0,0,1/4))
var.test(infile[infile$test.case=="SH-COLD"], infile[infile$test.case=="3B-COLD"])
var.test(infile[infile$test.case=="SH-COLD"], infile[infile$test.case=="SH-RT"])
var.test(infile[infile$test.case=="SH-COLD"]$tau, infile[infile$test.case=="SH-RT"]$tau)
var.test(infile[infile$test.case=="SH-COLD",]$tau, infile[infile$test.case=="SH-RT",]$tau)
var.test(infile[infile$test.case=="3B-COLD",]$tau, infile[infile$test.case=="3B-RT",]$tau)
aggregate(tau$test.case, data=infile, FUN=mean)
aggregate(tau~test.case, data=infile, FUN=mean)
aggregate(tau, by=list(test.case), data=infile, FUN=mean)
aggregate(infile$tau, by=list(infile$test.case), data=infile, FUN=mean)
aggregate(tau~test.case, data=infile, FUN=meann)
aggregate(tau~test.case, data=infile, FUN=mean)
aggregate(tau~test.case, data=infile, FUN=SD)
aggregate(tau~test.case, data=infile, FUN=sd)
cold = infile[infile$test.case=="3B-COLD",]$tau
rt = infile[infile$test.case=="3B-RT",]$tau
t.test(cold, rt, var.equal = TRUE)
qt(0.975, df=79)
c(qt(0.975, df=79),-qt(0.975,df=79))
a=c(qt(0.975, df=79),-qt(0.975,df=79))
-5.67+a
b=a*11.91
b
-5.67+b
infile = read.csv("C:\\rk\\Bigdata\\Statistics and Data analysis\\Statistics An easier way with R\\data\\comp-temps.csv", header=T)
head(infile)
nrow(infile)
hist(infile$diff)
shapiro.test(infile$diff)
subfile = infile[sample(nrow(infile), 30), ]
head(subfile)
qqnorm(subfile$diff)
qqline(subfile$diff)
pt(4.758,df=29)
t.test(subfile$cho, subfile$shd, paired=TRUE, alternative = "greater")
t.test(subfile$cho, subfile$shd, paired=TRUE)
install.packages("rmarkdown")
library(mosaic)
require(mosaic)
require(tigerstats)
install.packages("tigerstats")
install.packages("tigerstats")
m111survey
library(tigerstats)
m111survey
head(m111survey)
summary(fastest, data=m111survey)
summary(!fastest, data=m111survey)
summary(~fastest, data=m111survey)
summary(~fastest, data=m111survey)
library(pastecs)
stats.des
stat.desc
stat.desc(fastest, data = m111survey)
stat.desc(~fastest)
head(m111survey)
summary(m111survey)
favstats(m111survey$fastest)
favstats(fastest, data=m111survey)
favstats(~fastest, data=m111survey)
m111survey$fastest
summary(m111survey$fastest)
stat.desc(m111survey$fastest)
densityplot(~fastest, data=m111survey,
xlab="Fastest Speed (mph)",
main = "Fastest Speed ever driven")
print (t)
x= 1
print(x)
source("SourceHttps.R)
source("SourceHttps.R")
source("shadenorm.R")
shadenorm(between=c(t,Inf), color="violet", title("Main Label"))
getwd()
mu_zero = 30
sample_mean = 33
sample_sd = 5.6
nr_of_samples = 32
rt()
rt(20)
rt(df=20)
rt(n=20)
rt(df = 21)
t.test(mean=14.6, mu=15.4, sd=2.5, df=34)
samples = rnorm(mean = 14.6, sd = 2.5, n = 35)
samples
mean(samples)
sd(samples)
samples = rnorm(mean = 14.6, sd = 2.5, n = 35)
mean(samples)
samples = rnorm(mean = 14.6, sd = 2.5, n = 35)
mean(samples)
samples = rnorm(mean = 14.6, sd = 2.5, n = 35)
mean(samples)
samples = rnorm(mean = 14.6, sd = 2.5, n = 35)
mean(samples)
mean(samples)
samples = rnorm(mean = 14.6, sd = 2.5, n = 35)
mean(samples)
sd(samples)
samples = rnorm(mean = 14.6, sd = 2.5, n = 35)
mean(samples)
sd(samples)
samples = rnorm(mean = 14.6, sd = 2.5, n = 35)
mean(samples)
sd(samples)
t.test(samples, mu=15.4)
a=t.test(samples, mu=15.4)
a$conf.int
a$conf.int[0]
a$conf.int(0)
a$conf.int
a$conf.int._1
attr(a$conf.int)
confint(a)
attr(a$conf.int, "conf.level")
type(a$conf.int)
class(a$conf.int)
a=c(1,2)
a[0]
a(0)
a[1]
a$conf.int[1]
a$conf.int
a$conf.int
result = t.test(speeds, mu=mu_zero)
speeds
speeds = c(23,23,5,4)
mu_zero = 14
result = t.test(speeds, mu=mu_zero)
result$conf.int[1]
result$conf.int[2]
shadenorm(between=c(result$conf.int[1], result$conf.int[2]), color="black")
qt(0.5, df = nr_of_samples-1)
qt(0, df = nr_of_samples-1)
qt(1, df = nr_of_samples-1)
nr_of_samples
qt(0.975, df = nr_of_samples-1)
qt(0.025, df = nr_of_samples-1)
_a = 2
2_a = 2
infile = read.csv("data/beer-foam.csv", header=T)
head(infile)
mu_zero = 30
sample_mean = 33
sample_sd = 5.6
nr_of_samples = 32
t = (sample_mean - mu_zero) / (sample_sd / sqrt(nr_of_samples))
print(t)
setwd("C:\\rk\\Bigdata\\Statistics and Data analysis\\Statistics An easier way with R\\Stats_with_R_git")
infile = read.csv("data/beer-foam.csv", header=T)
threeB_cold = infile[infile$test.case=="3B-COLD"]
threeB_cold = infile[infile$test.case=="3B-COLD",]
threeB_rt = infile[infile$test.case=="3B-RT",]
nrow(threeB_cold)
nrow(threeB_rt)
cold_samples$tau
2^2
